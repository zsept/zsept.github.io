<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on z`note</title>
        <link>https://zsept.cn/posts/</link>
        <description>Recent content in Posts on z`note</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>z</copyright>
        <lastBuildDate>Sat, 23 May 2020 17:18:12 +0800</lastBuildDate>
        <atom:link href="https://zsept.cn/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>[leetcode] 76.minimum window substring</title>
            <link>https://zsept.cn/posts/leetcode/76_minimum_window_substring/</link>
            <pubDate>Sat, 23 May 2020 17:18:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/leetcode/76_minimum_window_substring/</guid>
            <description>Title  Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). Example:
Input: S = &amp;ldquo;ADOBECODEBANC&amp;rdquo;, T = &amp;ldquo;ABC&amp;rdquo; Output: &amp;ldquo;BANC&amp;rdquo;
Note:
If there is no such window in S that covers all characters in T, return the empty string &amp;ldquo;&amp;quot;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</description>
            <content type="html"><![CDATA[<h2 id="title">Title</h2>
<blockquote>
<p>Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).
Example:</p>
<p>Input: S = &ldquo;ADOBECODEBANC&rdquo;, T = &ldquo;ABC&rdquo;
Output: &ldquo;BANC&rdquo;</p>
<p>Note:</p>
<p>If there is no such window in S that covers all characters in T, return the empty string &ldquo;&quot;.
If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</p>
<p>来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-window-substring
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
</blockquote>
<h2 id="code">Code</h2>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#75715e">// need fix
</span><span style="color:#75715e"></span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;iostream&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;map&gt;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setStrFrequency</span>(std<span style="color:#f92672">::</span>string <span style="color:#f92672">&amp;</span>str, std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;&amp;</span> map)
{
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span><span style="color:#f92672">&amp;</span> ch:str) { map[ch]<span style="color:#f92672">++</span>; }
}

<span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">check_match</span>(std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&amp;</span>map_win, std<span style="color:#f92672">::</span>map<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> <span style="color:#f92672">&amp;</span>map_dst)
{
    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">auto</span> it:map_dst) {
        <span style="color:#66d9ef">if</span> (it.second <span style="color:#f92672">&gt;</span> map_win[it.first]) {
            std<span style="color:#f92672">::</span>cout <span style="color:#f92672">&lt;&lt;</span><span style="color:#e6db74">&#34;chekc : &#34;</span> <span style="color:#f92672">&lt;&lt;</span> it.first <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">&lt;&lt;</span> it.second <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">&lt;&lt;</span> map_win[it.first] <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
            <span style="color:#66d9ef">return</span> false;
        }
    }
    <span style="color:#66d9ef">return</span> true;
}

<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">test_minimum_window_substring</span>()
{
    std<span style="color:#f92672">::</span>string strS <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ADOBECODEBANC&#34;</span>;
    std<span style="color:#f92672">::</span>string strT <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ABC&#34;</span>;

    std<span style="color:#f92672">::</span>map <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> map_t;
    setStrFrequency(strT, map_t);

    std<span style="color:#f92672">::</span>map <span style="color:#f92672">&lt;</span><span style="color:#66d9ef">char</span>, <span style="color:#66d9ef">int</span><span style="color:#f92672">&gt;</span> map_window;

   <span style="color:#66d9ef">int</span> left  <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; 
   <span style="color:#66d9ef">int</span> right <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; 
   <span style="color:#66d9ef">int</span> min_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
   <span style="color:#66d9ef">int</span> min_left <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>;

   <span style="color:#66d9ef">for</span> (; right <span style="color:#f92672">&lt;</span> strS.size(); ) {
       <span style="color:#66d9ef">char</span> ch_right <span style="color:#f92672">=</span> strS[right];
       <span style="color:#66d9ef">if</span> (map_t.find(ch_right) <span style="color:#f92672">==</span> map_t.end()) {
           right<span style="color:#f92672">++</span>;
           <span style="color:#66d9ef">continue</span>;
       }
       
       <span style="color:#66d9ef">if</span> (map_window[ch_right] <span style="color:#f92672">&lt;</span> map_t[ch_right]) {
           map_window[ch_right]<span style="color:#f92672">++</span>;
           std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span><span style="color:#e6db74">&#34;right : &#34;</span> <span style="color:#f92672">&lt;&lt;</span> right <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">&lt;&lt;</span>  ch_right <span style="color:#f92672">&lt;&lt;</span> <span style="color:#e6db74">&#34; &#34;</span> <span style="color:#f92672">&lt;&lt;</span> map_window[ch_right] <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
       }

       <span style="color:#66d9ef">if</span> (check_match(map_window, map_t) <span style="color:#f92672">&amp;&amp;</span> left <span style="color:#f92672">&lt;=</span> right) {
           <span style="color:#66d9ef">if</span> (right <span style="color:#f92672">-</span> left <span style="color:#f92672">&lt;</span> min_length <span style="color:#f92672">||</span> min_length <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
               min_length <span style="color:#f92672">=</span> right <span style="color:#f92672">-</span> left <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
               min_left <span style="color:#f92672">=</span> left;
           }

           std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span> strS.substr(left, right <span style="color:#f92672">-</span> left <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;

           <span style="color:#66d9ef">while</span>(left <span style="color:#f92672">&lt;=</span> right) {
               <span style="color:#66d9ef">char</span> ch_left <span style="color:#f92672">=</span> strS[left];
               map_window[ch_left]<span style="color:#f92672">--</span>;
               left<span style="color:#f92672">++</span>;
               <span style="color:#66d9ef">if</span> (check_match(map_window, map_t)) {
                   <span style="color:#66d9ef">if</span> (right <span style="color:#f92672">-</span> left <span style="color:#f92672">&lt;</span> min_length <span style="color:#f92672">||</span> min_length <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span>) {
                       min_length <span style="color:#f92672">=</span> right <span style="color:#f92672">-</span> left <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
                       min_left <span style="color:#f92672">=</span> left;
                   }
               }
           }
           <span style="color:#75715e">// continue;
</span><span style="color:#75715e"></span>       }

       std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span> right <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
       <span style="color:#f92672">++</span>right;
       <span style="color:#75715e">// std::cout &lt;&lt; &#34;left &#34; &lt;&lt; left &lt;&lt; &#34; right &#34; &lt;&lt; right &lt;&lt; std::endl;
</span><span style="color:#75715e"></span>   }

   std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span> min_length <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;
   std<span style="color:#f92672">::</span>cout<span style="color:#f92672">&lt;&lt;</span> strS.substr(min_left, min_length) <span style="color:#f92672">&lt;&lt;</span> std<span style="color:#f92672">::</span>endl;

   <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}

</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Learning Metarials</title>
            <link>https://zsept.cn/posts/summary/</link>
            <pubDate>Thu, 21 May 2020 20:38:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/summary/</guid>
            <description>Learning Metarials 1.3Blue1Grown https://space.bilibili.com/88461692/video?tid=0&amp;amp;page=4&amp;amp;keyword=&amp;amp;order=pubdate</description>
            <content type="html"><![CDATA[<h2 id="learning-metarials">Learning Metarials</h2>
<p>1.3Blue1Grown
<a href="https://space.bilibili.com/88461692/video?tid=0&amp;page=4&amp;keyword=&amp;order=pubdate">https://space.bilibili.com/88461692/video?tid=0&amp;page=4&amp;keyword=&amp;order=pubdate</a></p>
]]></content>
        </item>
        
        <item>
            <title>[Algorithm] Fibonacci</title>
            <link>https://zsept.cn/posts/algorithm/fibnoacci/</link>
            <pubDate>Tue, 05 May 2020 21:53:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/algorithm/fibnoacci/</guid>
            <description>Fibonacci 递归 uint64_t fibonacci(uint64_t n) { if (n &amp;gt; 1) { return fibonacci(n -1) + fibonacci(n -2); } else { return n; } } 非递归 uint64_t fibonacci_1(uint64_t n) { if (n &amp;lt; 2) { return n; } uint64_t fn = 0; uint64_t fn0 = 0; uint64_t fn1 = 1; uint64_t count = 2; while (count &amp;lt;= n) { fn = fn0 + fn1; fn0 = fn1; fn1 = fn; count++; } return fn; } 矩阵 std::pair&amp;lt;uint64_t, uint64_t&amp;gt; fibonacci_3(size_t n) { // 返回F_{n}和F_{n + 1}, 注意是对UINT64_MAX取模的结果.</description>
            <content type="html"><![CDATA[<h2 id="fibonacci">Fibonacci</h2>
<h3 id="递归">递归</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">uint64_t</span> <span style="color:#a6e22e">fibonacci</span>(<span style="color:#66d9ef">uint64_t</span> n)
{
    <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">1</span>) {
        <span style="color:#66d9ef">return</span> fibonacci(n <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#f92672">+</span> fibonacci(n <span style="color:#f92672">-</span><span style="color:#ae81ff">2</span>);
    } <span style="color:#66d9ef">else</span> {
        <span style="color:#66d9ef">return</span> n;
    }
}
</code></pre></div><h3 id="非递归">非递归</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++"><span style="color:#66d9ef">uint64_t</span> <span style="color:#a6e22e">fibonacci_1</span>(<span style="color:#66d9ef">uint64_t</span> n)
{
    <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>) { <span style="color:#66d9ef">return</span> n; }

    <span style="color:#66d9ef">uint64_t</span> fn  <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">uint64_t</span> fn0 <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">uint64_t</span> fn1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;

    <span style="color:#66d9ef">uint64_t</span> count <span style="color:#f92672">=</span> <span style="color:#ae81ff">2</span>;
    <span style="color:#66d9ef">while</span> (count <span style="color:#f92672">&lt;=</span> n) {
        fn  <span style="color:#f92672">=</span> fn0 <span style="color:#f92672">+</span> fn1;
        fn0 <span style="color:#f92672">=</span> fn1;
        fn1 <span style="color:#f92672">=</span> fn;
        count<span style="color:#f92672">++</span>;
    }
    <span style="color:#66d9ef">return</span> fn;
}
</code></pre></div><h3 id="矩阵">矩阵</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c++" data-lang="c++">std<span style="color:#f92672">::</span>pair<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">uint64_t</span>, <span style="color:#66d9ef">uint64_t</span><span style="color:#f92672">&gt;</span> fibonacci_3(size_t n)
{
    <span style="color:#75715e">// 返回F_{n}和F_{n + 1}, 注意是对UINT64_MAX取模的结果.
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
        <span style="color:#66d9ef">auto</span> PF <span style="color:#f92672">=</span> fibonacci_3(n <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>);   <span style="color:#75715e">// 基于递归求解.
</span><span style="color:#75715e"></span>        <span style="color:#66d9ef">auto</span> t0 <span style="color:#f92672">=</span> PF.first;
        <span style="color:#66d9ef">auto</span> t1 <span style="color:#f92672">=</span> PF.second;
        <span style="color:#66d9ef">if</span> (n <span style="color:#f92672">%</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">1</span>) {
            <span style="color:#75715e">// 奇数情况.
</span><span style="color:#75715e"></span>            <span style="color:#66d9ef">return</span> {t0 <span style="color:#f92672">*</span> t0 <span style="color:#f92672">+</span> t1 <span style="color:#f92672">*</span> t1,    (<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> t0 <span style="color:#f92672">+</span> t1) <span style="color:#f92672">*</span> t1 };
        } <span style="color:#66d9ef">else</span> {
            <span style="color:#66d9ef">return</span> {(<span style="color:#ae81ff">2</span> <span style="color:#f92672">*</span> t1 <span style="color:#f92672">-</span> t0) <span style="color:#f92672">*</span> t0,   t0 <span style="color:#f92672">*</span> t0 <span style="color:#f92672">+</span> t1 <span style="color:#f92672">*</span> t1 };
        }
    }

    <span style="color:#66d9ef">return</span> {<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">1</span>};
}
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Linux ELF</title>
            <link>https://zsept.cn/posts/linux_elf/</link>
            <pubDate>Mon, 06 Apr 2020 18:50:55 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/linux_elf/</guid>
            <description>ELF HEADER Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .interp PROGBITS 00000000000002a8 0002a8 00001c 00 A 0 0 1 [ 2] .note.gnu.build-id NOTE 00000000000002c4 0002c4 000024 00 A 0 0 4 [ 3] .note.ABI-tag NOTE 00000000000002e8 0002e8 000020 00 A 0 0 4 [ 4] .gnu.hash GNU_HASH 0000000000000308 000308 00001c 00 A 5 0 8 [ 5] .</description>
            <content type="html"><![CDATA[<h2 id="elf-header">ELF HEADER</h2>
<pre><code>Section Headers:
  [Nr] Name              Type            Address          Off    Size   ES Flg Lk Inf Al
  [ 0]                   NULL            0000000000000000 000000 000000 00      0   0  0
  [ 1] .interp           PROGBITS        00000000000002a8 0002a8 00001c 00   A  0   0  1
  [ 2] .note.gnu.build-id NOTE           00000000000002c4 0002c4 000024 00   A  0   0  4
  [ 3] .note.ABI-tag     NOTE            00000000000002e8 0002e8 000020 00   A  0   0  4
  [ 4] .gnu.hash         GNU_HASH        0000000000000308 000308 00001c 00   A  5   0  8
  [ 5] .dynsym           DYNSYM          0000000000000328 000328 0000d8 18   A  6   1  8
  [ 6] .dynstr           STRTAB          0000000000000400 000400 0000ed 00   A  0   0  1
  [ 7] .gnu.version      VERSYM          00000000000004ee 0004ee 000012 02   A  5   0  2
  [ 8] .gnu.version_r    VERNEED         0000000000000500 000500 000040 00   A  6   2  8
  [ 9] .rela.dyn         RELA            0000000000000540 000540 0000f0 18   A  5   0  8
  [10] .rela.plt         RELA            0000000000000630 000630 000030 18  AI  5  22  8
  [11] .init             PROGBITS        0000000000001000 001000 00001b 00  AX  0   0  4
  [12] .plt              PROGBITS        0000000000001020 001020 000030 10  AX  0   0 16
  [13] .text             PROGBITS        0000000000001050 001050 000205 00  AX  0   0 16
  [14] .fini             PROGBITS        0000000000001258 001258 00000d 00  AX  0   0  4
  [15] .rodata           PROGBITS        0000000000002000 002000 000005 00   A  0   0  4
  [16] .eh_frame_hdr     PROGBITS        0000000000002008 002008 000044 00   A  0   0  4
  [17] .eh_frame         PROGBITS        0000000000002050 002050 000118 00   A  0   0  8
  [18] .init_array       INIT_ARRAY      0000000000003da8 002da8 000010 08  WA  0   0  8
  [19] .fini_array       FINI_ARRAY      0000000000003db8 002db8 000008 08  WA  0   0  8
  [20] .dynamic          DYNAMIC         0000000000003dc0 002dc0 000210 10  WA  6   0  8
  [21] .got              PROGBITS        0000000000003fd0 002fd0 000030 08  WA  0   0  8
  [22] .got.plt          PROGBITS        0000000000004000 003000 000028 08  WA  0   0  8
  [23] .data             PROGBITS        0000000000004028 003028 000010 00  WA  0   0  8
  [24] .bss              NOBITS          0000000000004038 003038 000010 00  WA  0   0  4
  [25] .comment          PROGBITS        0000000000000000 003038 000011 01  MS  0   0  1
  [26] .symtab           SYMTAB          0000000000000000 003050 0006a8 18     27  50  8
  [27] .strtab           STRTAB          0000000000000000 0036f8 0002e3 00      0   0  1
  [28] .shstrtab         STRTAB          0000000000000000 0039db 000103 00      0   0  1
</code></pre><p>.rodata  read only data</p>
<h2 id="references">References</h2>
<p>[1]<a href="https://linux.die.net/man/5/elf">https://linux.die.net/man/5/elf</a></p>
<p>[2]<a href="https://elinux.org/Executable_and_Linkable_Format_(ELF)">https://elinux.org/Executable_and_Linkable_Format_(ELF)</a></p>
<p>[3]<a href="ftp.openwatcom.org/devel/docs/elf-64-gen.pdf">ftp.openwatcom.org/devel/docs/elf-64-gen.pdf</a></p>
]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; static</title>
            <link>https://zsept.cn/posts/cpp_misc/</link>
            <pubDate>Sun, 05 Apr 2020 18:11:22 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/cpp_misc/</guid>
            <description>  const char s[]
在c中, 建议使用第二种方式
const char s[3] = &amp;#34;abc&amp;#34;; // no &amp;#39;\0&amp;#39; const char s[] = &amp;#34;abc&amp;#34;; // has &amp;#39;\0&amp;#39;   std::string
// defined in &amp;lt;string&amp;gt; using string = basic_string&amp;lt;char&amp;gt;; using u8string = basic_string&amp;lt;char8_t&amp;gt;; using u16string = basic_string&amp;lt;char16_t&amp;gt;; using u32string = basic_string&amp;lt;char32_t&amp;gt;; using wstring = basic_string&amp;lt;wchar_t&amp;gt;;   进程内存的精确组织形式依赖于操作系统，编译器，连接器
  </description>
            <content type="html"><![CDATA[<ul>
<li>
<p>const char s[]</p>
<p>在c中, 建议使用第二种方式</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-C" data-lang="C"><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> s[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abc&#34;</span>; <span style="color:#75715e">// no &#39;\0&#39;
</span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> s[] <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;abc&#34;</span>;  <span style="color:#75715e">// has &#39;\0&#39;
</span></code></pre></div></li>
<li>
<p>std::string</p>
<pre><code>// defined in &lt;string&gt;
using string    = basic_string&lt;char&gt;;
using u8string  = basic_string&lt;char8_t&gt;;
using u16string = basic_string&lt;char16_t&gt;;
using u32string = basic_string&lt;char32_t&gt;;
using wstring   = basic_string&lt;wchar_t&gt;;

</code></pre></li>
<li>
<p>进程内存的精确组织形式依赖于操作系统，编译器，连接器</p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; Compile</title>
            <link>https://zsept.cn/posts/cpp_compile/</link>
            <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/cpp_compile/</guid>
            <description>Overview   source file =====&amp;gt; preprocessing =====&amp;gt; complitation =====&amp;gt; Link
g++ -std=c++11 main_test.cpp -o main_test   Preprocessing  preprocessor changes the progrPreprocessingam according to the directives mentioned (that starts with # sign).
C++ supports many preprocessor directives like #include, #define, #if, #else etc.
  preprocess g++ -std=c++11 -E main_test.cpp -o main_test.i   Complitation  translates the program into a low level assembly level code.
   assembly</description>
            <content type="html"><![CDATA[<h2 id="overview">Overview</h2>
<ul>
<li>
<p><strong>source file =====&gt; preprocessing =====&gt; complitation  =====&gt; Link</strong></p>
<pre><code>g++ -std=c++11 main_test.cpp -o main_test
</code></pre></li>
</ul>
<h2 id="preprocessing">Preprocessing</h2>
<blockquote>
<p>preprocessor changes the progrPreprocessingam according to the directives mentioned (that starts with # sign).</p>
<p>C++ supports many preprocessor directives like <strong>#include, #define, #if, #else</strong> etc.</p>
</blockquote>
<ul>
<li>preprocess
<pre><code>g++ -std=c++11 -E main_test.cpp -o main_test.i
</code></pre></li>
</ul>
<h2 id="complitation">Complitation</h2>
<blockquote>
<p>translates the program into a low level assembly level code.</p>
</blockquote>
<ul>
<li>
<p>assembly</p>
<pre><code>g++ -std=c++11 -S main_test.i -o main_test.s
</code></pre></li>
<li>
<p>comiple to Target object file(.o)</p>
<pre><code>g++ -std=c++11 -c main_test.s -o main_test.o
</code></pre><p>use command <code>readelf -all main_test.o</code> read file</p>
</li>
</ul>
<h2 id="link">Link</h2>
<blockquote>
<p>refers to creation of a single executable file from multiple object files.</p>
</blockquote>
<ul>
<li>link
<pre><code>g++ -std=c++11 main_test.o -o main_test
</code></pre></li>
</ul>
<h2 id="references">References</h2>
<p>[1] <a href="https://en.cppreference.com/w/cpp/compiler_support">https://en.cppreference.com/w/cpp/compiler_support</a></p>
<p>[2] <a href="https://www.cplusplus.com/articles/2v07M4Gy/">https://www.cplusplus.com/articles/2v07M4Gy</a></p>
<p>[3] <a href="https://blog.csdn.net/CSDN_Violin/article/details/79430384">https://blog.csdn.net/CSDN_Violin/article/details/79430384</a></p>
]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; static</title>
            <link>https://zsept.cn/posts/cpp_static/</link>
            <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/cpp_static/</guid>
            <description>Storage class specifiers static is Storage class specifiers. (auto, extern, thread_local, mutable).
References [1]https://en.cppreference.com/w/cpp/language/storage_duration</description>
            <content type="html"><![CDATA[<h2 id="storage-class-specifiers">Storage class specifiers</h2>
<p>static is Storage class specifiers. (auto, extern, thread_local, mutable).</p>
<h2 id="references">References</h2>
<p>[1]<a href="https://en.cppreference.com/w/cpp/language/storage_duration">https://en.cppreference.com/w/cpp/language/storage_duration</a></p>
]]></content>
        </item>
        
        <item>
            <title>C&#43;&#43; Virtual</title>
            <link>https://zsept.cn/posts/cpp_virtual/</link>
            <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/cpp_virtual/</guid>
            <description></description>
            <content type="html"><![CDATA[]]></content>
        </item>
        
        <item>
            <title>Vim .vimrc</title>
            <link>https://zsept.cn/posts/cpp_vimrc/</link>
            <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
            
            <guid>https://zsept.cn/posts/cpp_vimrc/</guid>
            <description>&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;plug&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot; &amp;quot; specify a directory for plugins &amp;quot; - For Neovim: ~/.local/share/nvim/plugged &amp;quot; - Avoid using standard Vim directory names like &#39;plugin&#39; call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; Make sure you use single quotes &amp;quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align &amp;quot; Plug &#39;junegunn/vim-easy-align&#39; &amp;quot; Any valid git URL is allowed &amp;quot; Plug &#39;https://github.com/junegunn/vim-github-dashboard.git&#39; &amp;quot; Multiple Plug commands can be written in a single line using | separators &amp;quot; Plug &#39;SirVer/ultisnips&#39; | Plug &#39;honza/vim-snippets&#39; &amp;quot; On-demand loading Plug &#39;scrooloose/nerdtree&#39;, { &#39;on&#39;: &#39;NERDTreeToggle&#39; } &amp;quot; Plug &#39;tpope/vim-fireplace&#39;, { &#39;for&#39;: &#39;clojure&#39; } &amp;quot; Using a non-master branch &amp;quot; Plug &#39;rdnetto/YCM-Generator&#39;, { &#39;branch&#39;: &#39;stable&#39; } &amp;quot; Using a tagged release; wildcard allowed (requires git 1.</description>
            <content type="html"><![CDATA[<pre><code>
&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;plug&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; specify a directory for plugins
&quot; - For Neovim: ~/.local/share/nvim/plugged
&quot; - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

&quot; Make sure you use single quotes

&quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
&quot; Plug 'junegunn/vim-easy-align'

&quot; Any valid git URL is allowed
&quot; Plug 'https://github.com/junegunn/vim-github-dashboard.git'

&quot; Multiple Plug commands can be written in a single line using | separators
&quot; Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

&quot; On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
&quot; Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

&quot; Using a non-master branch
&quot; Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

&quot; Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
&quot;Plug 'fatih/vim-go', { 'tag': '*' }

&quot; Plugin options
&quot; Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

&quot; Plugin outside ~/.vim/plugged with post-update hook
&quot; Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

&quot; Plug 'easymotion/vim-easymotion'

Plug 'majutsushi/tagbar'

&quot; Plug 'ctrlpvim/ctrlp.vim'

&quot; Plug 'basilgor/vim-autotags'

&quot; Plug 'fishy/projtags-vim' 

Plug 'scrooloose/nerdcommenter' 

Plug 'vim-scripts/mru.vim' 

&quot; Plug 'vim-scripts/taglist.vim'

Plug 'junegunn/goyo.vim' 

&quot; plug for markdown
Plug 'godlygeek/tabular'

&quot; plug for markdown
Plug 'plasticboy/vim-markdown'

&quot; plug color theme vim-one
Plug 'rakr/vim-one'

&quot; plug ai auto complete 
&quot; Plug 'zxqfl/tabnine-vim'

&quot; plug you compete me 
&quot; Plug 'ycm-core/YouCompleteMe'



&quot; Initialize plugin system
call plug#end()



&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; settings &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
syntax on
&quot; syntax enable
filetype on
filetype plugin on

set laststatus=2
set lazyredraw

&quot; When the page starts to scroll, keep the cursor 8 lines from the top and 8 lines from the bottom
set scrolloff=12
set nowrap
set synmaxcol=2048
set nocursorline
set nocursorcolumn

let mapleader = &quot;,&quot; 
&quot;let mapleader=&quot;\&lt;Space&gt;&quot; &quot;前缀键，即&lt;leader&gt;

set expandtab &quot;TAB替换为空格
set ts=4

set showcmd &quot; 命令行显示输入的命令
set showmode
set ruler &quot;标尺
set nu
set ai &quot;设置自动缩进
set cindent &quot;设置使用 C/C++ 语言的自动缩进方式

set shiftwidth=4 &quot;设置自动缩进 2 个空格
set history=50 
set incsearch &quot; 输入字符串就显示匹配点

set hlsearch &quot; / 搜索高亮


&quot; resize relative
&quot; :resize +3
&quot; :resize -3
&quot; :vertical resize -3
&quot; :vertical resize +3



&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;ctags and scope &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; may custom your ctags and scope path
let g:local_ctags_path=$HOME . '/.vim/dependency/universal-ctags/bin/ctags'
let g:local_cscope_path=$HOME . '/.vim/dependency/cscope/bin/cscope'



&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;tagbar or taglist &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
let g:tagbar_ctags_bin = g:local_ctags_path
nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;




&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;autotags&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; let g:autotagTagsFile=&quot;.tags&quot;

let g:autotags_ctags_exe = g:local_ctags_path 
let g:autotags_cscope_exe = g:local_cscope_path
let g:autotags_ctags_opts = &quot;--c++-kinds=+p --fields=+iaS --extra=+q&quot;
let g:autotags_cscope_file_extensions = &quot;.cpp .cc .cpp .m .hpp .hh .h .hxx .hpp .c .idl .vim&quot;

let g:autotags_no_global = 1
let g:autotags_export_cscope_dir = 1




&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;netrw&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; setting do not auto open
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1 



&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;nerdtree&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
&quot; 自动打开nerdtree
autocmd vimenter * NERDTree
&quot;
&quot;Delete help information at the top
&quot; let NERDTreeMinimalUI=1
&quot; show bookmark
let NERDTreeShowBookmarks=1
&quot; close when open file
let g:NERDTreeQuitOnOpen=0
&quot; 打开关闭nerdtree
nmap &lt;F7&gt; :NERDTreeToggle&lt;CR&gt;         
nmap ,nf :NERDTreeFind&lt;CR&gt;
&quot; let g:NERDTreeDirArrowExpandable = '▸'
&quot; let g:NERDTreeDirArrowCollapsible = '▾'




&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;mark&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
nmap &lt;unique&gt; &lt;silent&gt; mm &lt;Plug&gt;MarkSet
vmap &lt;unique&gt; &lt;silent&gt; mm &lt;Plug&gt;MarkSet
nmap &lt;unique&gt; &lt;silent&gt; mr &lt;Plug&gt;MarkRegex
vmap &lt;unique&gt; &lt;silent&gt; mr &lt;Plug&gt;MarkRegex
nmap &lt;unique&gt; &lt;silent&gt; mn &lt;Plug&gt;MarkClear




&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;air line&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_symbols.space = &quot;\ua0&quot;

&quot; let g:airline_theme='simple'
let g:airline_theme='one'
let g:airline#extensions#tabline#enabled = 1
&quot;let g:airline#extensions#tabline#left_sep = ' '
&quot;let g:airline#extensions#tabline#left_alt_sep = '|'


&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; mru &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
map &lt;space&gt;m :MRU&lt;CR&gt;
let MRU_Use_Current_Window = 0
let MRU_Auto_Close = 1


&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot; nerdcommenter &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
let g:NERDSpaceDelims=1 &quot;注释添加空格
nmap &lt;silent&gt;  &lt;backspace&gt; &lt;plug&gt;NERDCommenterToggle :call &lt;SID&gt;NERDComment('nx', &quot;Toggle&quot;)&lt;CR&gt;
vmap &lt;silent&gt;  &lt;backspace&gt; &lt;plug&gt;NERDCommenterToggle :call &lt;SID&gt;NERDComment('nx', &quot;Toggle&quot;)&lt;CR&gt;
&quot; vmap &lt;silent&gt;  &lt;backspace&gt; &lt;plug&gt;NERDCommenterInvert :call &lt;SID&gt;NERDCommentInvert('nx', &quot;Invert&quot;)&lt;CR&gt;
&quot; nmap &lt;silent&gt;  &lt;backspace&gt; &lt;plug&gt;NERDCommenterInvert :call &lt;SID&gt;NERDCommentInvert('nx', &quot;Invert&quot;)&lt;CR&gt;


&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;  easymotion &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
map &lt;space&gt; &lt;Plug&gt;(easymotion-prefix)
 


&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;  vim markdown &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
let g:vim_markdown_folding_disabled = 1




&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;color theme &quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;
set fillchars=vert:\  
&quot;set fillchars=vert:\  
&quot;在被分割的窗口间显示空白，便于阅读 (没看到效果)
&quot;stl:/ : 当前窗口状态栏显示'空格' ('/'转义字符)
&quot;stlnc:- : 非当前窗口状态栏显示---
&quot;vert:/| : 垂直分割线为|
&quot;fold:- : 若设置折叠功能,折叠后显示---
&quot;set fillchars=stl:/ ,stlnc:-,vert:/|,fold:-,diff:-
&quot;set fillchars=vert:/ ,stl:/ ,stlnc:/

&quot;map &lt;silent&gt;&lt;F3&gt; :NEXTCOLOR&lt;cr&gt; 
&quot;map &lt;silent&gt;&lt;F2&gt; :PREVCOLOR&lt;cr&gt; 


&quot; colorscheme mycolor
&quot; hi Search  cterm=underline ctermfg=208 ctermbg=NONE


&quot; color settting for vim-one
set background=dark &quot; for the dark version  set background=light for the light version
let g:one_allow_italics = 1 &quot; italic for comments
colorscheme one
if (has(&quot;termguicolors&quot;))
    set termguicolors     &quot; enable true colors support
endif


&quot;终端类型     前景色        背景色
&quot;&quot;term           -              -          黑白终端
&quot;cterm        ctermfg      ctermgb        彩色终端
&quot;&quot;gui          guifg        guibg          图形介面
hi clear Search
call one#highlight('Search', 'eec900', '', 'underline')


</code></pre>]]></content>
        </item>
        
    </channel>
</rss>
