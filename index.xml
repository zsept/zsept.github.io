<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>z`note</title>
    <link>https://zsept.cn/</link>
    <description>Recent content on z`note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>z</copyright>
    <lastBuildDate>Sat, 04 Apr 2020 12:35:00 +0800</lastBuildDate>
    
	<atom:link href="https://zsept.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://zsept.cn/about/</link>
      <pubDate>Sat, 04 Apr 2020 12:35:00 +0800</pubDate>
      
      <guid>https://zsept.cn/about/</guid>
      <description>use theme hello-friend</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Compile</title>
      <link>https://zsept.cn/posts/cpp_compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_compile/</guid>
      <description>Overview   source file =====&amp;gt; preprocessing =====&amp;gt; complitation =====&amp;gt; Link
g++ -std=c++11 main_test.cpp -o main_test   Preprocessing  preprocessor changes the progrPreprocessingam according to the directives mentioned (that starts with # sign).
C++ supports many preprocessor directives like #include, #define, #if, #else etc.
  preprocess g++ -std=c++11 -E main_test.cpp -o main_test.i   Complitation  translates the program into a low level assembly level code.
   assembly</description>
    </item>
    
    <item>
      <title>Vim .vimrc</title>
      <link>https://zsept.cn/posts/cpp_vimrc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_vimrc/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;plug&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot; &amp;quot; specify a directory for plugins &amp;quot; - For Neovim: ~/.local/share/nvim/plugged &amp;quot; - Avoid using standard Vim directory names like &#39;plugin&#39; call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; Make sure you use single quotes &amp;quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align &amp;quot; Plug &#39;junegunn/vim-easy-align&#39; &amp;quot; Any valid git URL is allowed &amp;quot; Plug &#39;https://github.com/junegunn/vim-github-dashboard.git&#39; &amp;quot; Multiple Plug commands can be written in a single line using | separators &amp;quot; Plug &#39;SirVer/ultisnips&#39; | Plug &#39;honza/vim-snippets&#39; &amp;quot; On-demand loading Plug &#39;scrooloose/nerdtree&#39;, { &#39;on&#39;: &#39;NERDTreeToggle&#39; } &amp;quot; Plug &#39;tpope/vim-fireplace&#39;, { &#39;for&#39;: &#39;clojure&#39; } &amp;quot; Using a non-master branch &amp;quot; Plug &#39;rdnetto/YCM-Generator&#39;, { &#39;branch&#39;: &#39;stable&#39; } &amp;quot; Using a tagged release; wildcard allowed (requires git 1.</description>
    </item>
    
  </channel>
</rss>