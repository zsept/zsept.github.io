<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>z`note</title>
    <link>https://zsept.cn/</link>
    <description>Recent content on z`note</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>z</copyright>
    <lastBuildDate>Sat, 04 Apr 2020 12:35:00 +0800</lastBuildDate>
    
	<atom:link href="https://zsept.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[leetcode] 76.minimum window substring</title>
      <link>https://zsept.cn/posts/leetcode/76_minimum_window_substring/</link>
      <pubDate>Sat, 23 May 2020 17:18:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/leetcode/76_minimum_window_substring/</guid>
      <description>Title  Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n). Example:
Input: S = &amp;ldquo;ADOBECODEBANC&amp;rdquo;, T = &amp;ldquo;ABC&amp;rdquo; Output: &amp;ldquo;BANC&amp;rdquo;
Note:
If there is no such window in S that covers all characters in T, return the empty string &amp;ldquo;&amp;quot;. If there is such window, you are guaranteed that there will always be only one unique minimum window in S.</description>
    </item>
    
    <item>
      <title>Learning Metarials</title>
      <link>https://zsept.cn/posts/summary/</link>
      <pubDate>Thu, 21 May 2020 20:38:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/summary/</guid>
      <description>  3Blue1Grown
https://space.bilibili.com/88461692/video?tid=0&amp;amp;page=4&amp;amp;keyword=&amp;amp;order=pubdate
  leetcode
https://leetcode-cn.com
  </description>
    </item>
    
    <item>
      <title>[Algorithm] Fibonacci</title>
      <link>https://zsept.cn/posts/algorithm/fibnoacci/</link>
      <pubDate>Tue, 05 May 2020 21:53:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/algorithm/fibnoacci/</guid>
      <description>Fibonacci 递归 uint64_t fibonacci(uint64_t n) { if (n &amp;gt; 1) { return fibonacci(n -1) + fibonacci(n -2); } else { return n; } } 非递归 uint64_t fibonacci_1(uint64_t n) { if (n &amp;lt; 2) { return n; } uint64_t fn = 0; uint64_t fn0 = 0; uint64_t fn1 = 1; uint64_t count = 2; while (count &amp;lt;= n) { fn = fn0 + fn1; fn0 = fn1; fn1 = fn; count++; } return fn; } 矩阵 std::pair&amp;lt;uint64_t, uint64_t&amp;gt; fibonacci_3(size_t n) { // 返回F_{n}和F_{n + 1}, 注意是对UINT64_MAX取模的结果.</description>
    </item>
    
    <item>
      <title>Linux ELF</title>
      <link>https://zsept.cn/posts/linux_elf/</link>
      <pubDate>Mon, 06 Apr 2020 18:50:55 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/linux_elf/</guid>
      <description>ELF HEADER Section Headers: [Nr] Name Type Address Off Size ES Flg Lk Inf Al [ 0] NULL 0000000000000000 000000 000000 00 0 0 0 [ 1] .interp PROGBITS 00000000000002a8 0002a8 00001c 00 A 0 0 1 [ 2] .note.gnu.build-id NOTE 00000000000002c4 0002c4 000024 00 A 0 0 4 [ 3] .note.ABI-tag NOTE 00000000000002e8 0002e8 000020 00 A 0 0 4 [ 4] .gnu.hash GNU_HASH 0000000000000308 000308 00001c 00 A 5 0 8 [ 5] .</description>
    </item>
    
    <item>
      <title>C&#43;&#43; static</title>
      <link>https://zsept.cn/posts/cpp_misc/</link>
      <pubDate>Sun, 05 Apr 2020 18:11:22 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_misc/</guid>
      <description>  const char s[]
在c中, 建议使用第二种方式
const char s[3] = &amp;#34;abc&amp;#34;; // no &amp;#39;\0&amp;#39; const char s[] = &amp;#34;abc&amp;#34;; // has &amp;#39;\0&amp;#39;   std::string
// defined in &amp;lt;string&amp;gt; using string = basic_string&amp;lt;char&amp;gt;; using u8string = basic_string&amp;lt;char8_t&amp;gt;; using u16string = basic_string&amp;lt;char16_t&amp;gt;; using u32string = basic_string&amp;lt;char32_t&amp;gt;; using wstring = basic_string&amp;lt;wchar_t&amp;gt;;   进程内存的精确组织形式依赖于操作系统，编译器，连接器
  </description>
    </item>
    
    <item>
      <title>C&#43;&#43; Compile</title>
      <link>https://zsept.cn/posts/cpp_compile/</link>
      <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_compile/</guid>
      <description>Overview   source file =====&amp;gt; preprocessing =====&amp;gt; complitation =====&amp;gt; Link
g++ -std=c++11 main_test.cpp -o main_test   Preprocessing  preprocessor changes the progrPreprocessingam according to the directives mentioned (that starts with # sign).
C++ supports many preprocessor directives like #include, #define, #if, #else etc.
  preprocess g++ -std=c++11 -E main_test.cpp -o main_test.i   Complitation  translates the program into a low level assembly level code.
   assembly</description>
    </item>
    
    <item>
      <title>C&#43;&#43; static</title>
      <link>https://zsept.cn/posts/cpp_static/</link>
      <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_static/</guid>
      <description>Storage class specifiers static is Storage class specifiers. (auto, extern, thread_local, mutable).
References [1]https://en.cppreference.com/w/cpp/language/storage_duration</description>
    </item>
    
    <item>
      <title>C&#43;&#43; Virtual</title>
      <link>https://zsept.cn/posts/cpp_virtual/</link>
      <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_virtual/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Vim .vimrc</title>
      <link>https://zsept.cn/posts/cpp_vimrc/</link>
      <pubDate>Sun, 05 Apr 2020 00:58:12 +0800</pubDate>
      
      <guid>https://zsept.cn/posts/cpp_vimrc/</guid>
      <description>&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;plug&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot; &amp;quot; specify a directory for plugins &amp;quot; - For Neovim: ~/.local/share/nvim/plugged &amp;quot; - Avoid using standard Vim directory names like &#39;plugin&#39; call plug#begin(&#39;~/.vim/plugged&#39;) &amp;quot; Make sure you use single quotes &amp;quot; Shorthand notation; fetches https://github.com/junegunn/vim-easy-align &amp;quot; Plug &#39;junegunn/vim-easy-align&#39; &amp;quot; Any valid git URL is allowed &amp;quot; Plug &#39;https://github.com/junegunn/vim-github-dashboard.git&#39; &amp;quot; Multiple Plug commands can be written in a single line using | separators &amp;quot; Plug &#39;SirVer/ultisnips&#39; | Plug &#39;honza/vim-snippets&#39; &amp;quot; On-demand loading Plug &#39;scrooloose/nerdtree&#39;, { &#39;on&#39;: &#39;NERDTreeToggle&#39; } &amp;quot; Plug &#39;tpope/vim-fireplace&#39;, { &#39;for&#39;: &#39;clojure&#39; } &amp;quot; Using a non-master branch &amp;quot; Plug &#39;rdnetto/YCM-Generator&#39;, { &#39;branch&#39;: &#39;stable&#39; } &amp;quot; Using a tagged release; wildcard allowed (requires git 1.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://zsept.cn/about/</link>
      <pubDate>Sat, 04 Apr 2020 12:35:00 +0800</pubDate>
      
      <guid>https://zsept.cn/about/</guid>
      <description>use theme hello-friend</description>
    </item>
    
  </channel>
</rss>